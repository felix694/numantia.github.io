<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://numantia.github.io</id>
    <title>云杉的速记</title>
    <updated>2021-05-28T06:55:27.257Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://numantia.github.io"/>
    <link rel="self" href="https://numantia.github.io/atom.xml"/>
    <subtitle>开放和共享思考，力争简化复杂，复杂天真</subtitle>
    <logo>https://numantia.github.io/images/avatar.png</logo>
    <icon>https://numantia.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 云杉的速记</rights>
    <entry>
        <title type="html"><![CDATA[Python 添加配置文件（.ini, .py, .json, etc）]]></title>
        <id>https://numantia.github.io/post/python-configuration-method/</id>
        <link href="https://numantia.github.io/post/python-configuration-method/">
        </link>
        <updated>2021-05-25T06:00:00.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BF%85%E8%A6%81%E6%80%A7">配置文件必要性</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%AF%94%E8%BE%83">常用配置文件比较</a>
<ul>
<li><a href="#1-ini-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">1. ini 配置文件</a></li>
<li><a href="#2-json-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. json 配置文件</a></li>
<li><a href="#3-%E5%88%9D%E5%A7%8B%E5%8C%96%E7%B1%BB">3.  初始化类</a></li>
</ul>
</li>
</ul>
</p>
<p>[TOC]</p>
<h1 id="配置文件必要性">配置文件必要性</h1>
<ol>
<li>集中管理，统一修改，降低修改难度，避免修改不全面</li>
<li>代码和参数分离，方便不同模块代码中重复调用，保持核心代码整洁</li>
</ol>
<h1 id="常用配置文件比较">常用配置文件比较</h1>
<p>配置文件复杂度比 ini &lt; json ≈ toml &lt; yaml</p>
<table>
<thead>
<tr>
<th>格式类型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>config.ini</td>
<td>通用格式，格式简单</td>
<td>不适合存储大量数据</td>
</tr>
<tr>
<td>config.json</td>
<td>通用格式，可嵌套，适合存放大量的<strong>结构化配置</strong>或者本地数据</td>
<td><strong>嵌套过深</strong>的问题，容易导致出错；语法标准严格限制，无法在当中<strong>写注释</strong></td>
</tr>
<tr>
<td>config.py / setting.py</td>
<td>在python工程中方便通过import方式导入</td>
<td>不利于<strong>非 Python 的平台</strong>进行配置文件共享</td>
</tr>
</tbody>
</table>
<h2 id="1-ini-配置文件">1. ini 配置文件</h2>
<p>使用 “ import configparser ”导入configparser模块，即可实现配置文件的写入、更新、删除、读取等操作。</p>
<p><strong>读</strong>  :</p>
<p><code>config.get(&quot;section&quot;, &quot;option&quot;)</code>  # 获取指定section下的options</p>
<p><code>config.getint(&quot;section&quot;, &quot;option&quot;)</code> # 将获取到值转换为int型</p>
<p><code>config.getboolean(&quot;section&quot;, &quot;option&quot;)</code> # 将获取到值转换为bool型</p>
<p><code>config.getfloat(&quot;section&quot;, &quot;option&quot;)</code>  # 将获取到值转换为浮点型</p>
<p><strong>更新：</strong></p>
<p><code>config.set(&quot;section_mod&quot;, &quot;option&quot;, &quot;option_value&quot;)</code> # 修改section_mod的option</p>
<p><code>config.add_section(&quot;section_add&quot;)</code> # 添加section节点</p>
<p><code>config.set(&quot;section_add&quot;, &quot;option&quot;, &quot;option_value&quot;)</code> # 设置指定section_add的options</p>
<p><strong>检查：</strong></p>
<p><code>config.options('section')</code>  # 获取指定section 的options即该节点的所有键</p>
<p><code>config.has_section(&quot;section&quot;)</code># 是否存在该section</p>
<p><code>config.has_option(&quot;section&quot;, &quot;option&quot;)</code>  # 是否存在该option</p>
<p><strong>删除：</strong></p>
<p><code>config.remove_section(&quot;section_rmv&quot;)</code> # 整个section_rmv下的所有内容都将删除</p>
<p><code>config.remove_option(&quot;section_rmv&quot;, 'option')</code> # 删除section_rmv下的指定option</p>
<p><strong>保存：</strong></p>
<p><code>config.write(open(&quot;Config&quot;, &quot;w&quot;))</code> # 保存config</p>
<p><strong>注意事项</strong></p>
<ol>
<li>
<p>读取都是字符串，无需在配置的时候写成字符串</p>
</li>
<li>
<p>读取字符串不区分大小写</p>
</li>
</ol>
<p>参考链接 1. <a href="https://zhuanlan.zhihu.com/p/59479898">python中配置文件的使用方法</a></p>
<h2 id="2-json-配置文件">2. json 配置文件</h2>
<pre><code class="language-python">&gt;&gt;&gt; import json
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; with open('/Users/Bobot/db.json') as j:
...   cfg = json.load(j)['localdb']
... 
&gt;&gt;&gt; pprint(cfg)
{'database': 'mysql',
 'host': '127.0.0.1',
 'password': '123456',
 'port': 3306,
 'user': 'root'}
</code></pre>
<p>使用json.load()读取json文件，读入的词典，无法直接用键值当做变量，常规需要 <code>database = cfg ['database']</code>  赋值方式来配置变量，若变量增多，配置过程会非常繁琐。通过 <code>globals().update(config)</code>  可以实现字典的变量访问，<code>globals()</code>获得（模块级）全局变量所组成的字典，修改该字典等同修改全局变量，所以通过 <code>.update(config)</code>可以将 <code>config</code> 字典内容转为变量<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p>
<pre><code class="language-python">a_dict = {&quot;key&quot;: &quot;value&quot;}
globals().update(a_dict)
print(key)
</code></pre>
<h2 id="3-初始化类">3.  初始化类</h2>
<p><strong>config.ini</strong></p>
<pre><code class="language-ini">[first_section]
option1 = 1
option2 = 0
option3 = 3.4
</code></pre>
<p><strong>config.json</strong></p>
<pre><code class="language-json">{
    &quot;localdb&quot;:{
        &quot;host&quot;: &quot;127.0.0.1&quot;,
        &quot;user&quot;: &quot;root&quot;,
        &quot;password&quot;: &quot;123456&quot;,
        &quot;port&quot;: 3306,
        &quot;database&quot;: &quot;mysql&quot;
    }
}
</code></pre>
<p><strong>initDemo()</strong></p>
<pre><code class="language-python">import configparser
import json

class initDemo():
    def __init__(self,fp1,fp2):
        self.fp1 = fp1 # .json 文件路径
        self.fp2 = fp2 # .ini 文件路径

    def read_json_config(self):
        &quot;&quot;&quot;&quot;读取json配置文件&quot;&quot;&quot;
        with open(self.fp1) as json_file:
            config = json.load(json_file)['localdb']
        return config

    def read_ini_config(self):
        
        &quot;&quot;&quot;&quot;读取ini配置文件&quot;&quot;&quot;
        config = configparser.ConfigParser()
        config.read(self.fp2, encoding=&quot;utf-8&quot;)

        first_section_items = dict(config.items(&quot;first_section&quot;))
        all_keys = config.options('first_section') # 只能识别小写，获取指定section 的options即该节点的所有键
        
        item1 = config.getint('first_section','item1') # 将获取到值转换为int型
        itme2 = config.getboolean('first_section','item2') # 将获取到值转换为bool型
        item3 = config.getfloat('first_section','item3') # 将获取到值转换为浮点型
        return 

    def update_json_config(self, config):
        &quot;&quot;&quot;&quot;更新配置文件&quot;&quot;&quot;
        with open(self.fp1, 'w') as json_file:
            json.dump(config, json_file)
        return None
</code></pre>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><ol>
<li><a href="https://blog.csdn.net/modabao/article/details/89193990">Python3.用json作为配置文件</a></li>
</ol>
 <a href="#fnref1" class="footnote-backref">↩︎</a></li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一文读懂 Python 开发环境配置]]></title>
        <id>https://numantia.github.io/post/python-devenv-configuration/</id>
        <link href="https://numantia.github.io/post/python-devenv-configuration/">
        </link>
        <updated>2021-05-18T04:09:44.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#python-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86">Python 多版本管理</a>
<ul>
<li><a href="#1-%E5%A4%9A%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8%E9%9C%80%E6%B1%82">1. 多版本使用需求</a></li>
<li><a href="#2-windows-%E4%B8%8B%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86">2. Windows 下多版本管理[^1]</a></li>
<li><a href="#3-linux-%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86-%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E5%AF%B9%E7%85%A7%E8%A1%A8">3. Linux 系统下多版本管理[^2]  - 建立一个对照表</a></li>
</ul>
</li>
<li><a href="#python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">Python 虚拟环境配置</a>
<ul>
<li><a href="#1-%E5%8E%9F%E7%90%86%E5%92%8C%E9%85%8D%E7%BD%AE%E9%9C%80%E6%B1%82">1. 原理和配置需求</a>
<ul>
<li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">操作系统的环境变量</a></li>
<li><a href="#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8C%E5%92%8C-path-%E4%BF%AE%E6%94%B9">虚拟环境运行和 PATH 修改</a></li>
<li><a href="#python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%85%B3%E7%B3%BB">Python解释器和虚拟环境关系</a></li>
</ul>
</li>
<li><a href="#2-%E5%AE%89%E8%A3%85-%E9%85%8D%E7%BD%AE">2.  安装 &amp; 配置</a>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-virtualenv-%E7%AE%A1%E7%90%86">使用 Virtualenv 管理[^3]</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-venv-%E7%AE%A1%E7%90%86">使用 venv 管理</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-pipenv-%E7%AE%A1%E7%90%86">使用 pipenv 管理</a></li>
</ul>
</li>
<li><a href="#3-%E6%BF%80%E6%B4%BB-%E9%80%80%E5%87%BA">3. 激活 &amp; 退出</a></li>
<li><a href="#4-anaconda-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86">4. Anaconda 虚拟环境管理</a></li>
<li><a href="#5-%E4%B8%8E%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%85%8D%E5%90%88">5. 与开发工具配合</a>
<ul>
<li><a href="#visual-studio-code">Visual Studio Code</a></li>
<li><a href="#pycharm">Pycharm</a></li>
</ul>
</li>
<li><a href="#6-python-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2">6. Python 开发环境部署</a></li>
</ul>
</li>
</ul>
</p>
<p>[toc]</p>
<p>持续更新...</p>
<h1 id="python-多版本管理">Python 多版本管理</h1>
<h2 id="1-多版本使用需求">1. 多版本使用需求</h2>
<p>场景1：如果我们想在python3上运行2.x版本的代码，就需要对代码进行大量的修改，产生不必要的工作量。</p>
<h2 id="2-windows-下多版本管理">2. Windows 下多版本管理<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<p><strong>步骤 1：</strong><a href="https://www.python.org/downloads/windows/">官网</a> （速度慢）或者<a href="http://npm.taobao.org/mirrors/python/">国内镜像</a>（速度快）下载Python 对应版本；</p>
<p><strong>步骤 2：</strong> 点击可执行文件安装 Python，注意<strong>选择“Add python.exe to Path”</strong>；</p>
<p><strong>步骤 3：</strong> 打开 CMD，查看当前电脑下有哪些 Python 版本和安装位置；</p>
<pre><code class="language-bash">&gt; where python 
C:\Users\***\AppData\Local\Programs\Python\Python39\python.exe
C:\Users\***\AppData\Local\Programs\Python\Python37\python.exe

&gt; python --version  # 查看默认版本 或者python -V
Python 3.9.4
</code></pre>
<p>打开 python 的文件路径，或者右键 python 快捷方式打开 “打开文件位置” 找到 Python 的安装位置；</p>
<figure data-type="image" tabindex="1"><img src="https://numantia.github.io/post-images/python_filepath.png" alt="python_filepath" loading="lazy"></figure>
<p><strong>步骤 4 ：</strong> 打开任意版本的 Python，并执行脚本命令；</p>
<p>​	方法1： 修改环境变量，将目标版本的 Python 路径添加到环境变量中，调用参数打开对应版本。</p>
<pre><code class="language-bash">&gt; py -3.9 # 快速启动 python 3.9
&gt; py -3.7 # 快速启动 python 3.7

&gt; py -3.9 -V # 查看详细版本 

&gt; py -3.7 helloworld.py # 打开 python 2 脚本
</code></pre>
<p>​	方法2：复制一份重命名为python39.exe。注意是复制一份重命名，而不是直接重命名。</p>
<figure data-type="image" tabindex="2"><img src="https://numantia.github.io/post-images/python-rename.png" alt="python-rename" loading="lazy"></figure>
<p><strong>步骤 5 ：</strong> 多版本共存对应版本的 pip 管理；</p>
<pre><code class="language-bash"># 多版本共存查看 pip 版本
&gt; python -m pip -V / pip -V # 查看默认 pip 版本
pip 21.1.1 from C:\Users\***\AppData\Local\Programs\Python\Python39\lib\site-packages\pip (python 3.9)
&gt; py -3.7 -m pip -V
pip 20.1.1 from C:\Users\***\AppData\Local\Programs\Python\Python37\lib\site-packages\pip (python 3.7)

# 卸载pip
&gt; python -m pip uninstall pip setuptools

# 多版本共存升级pip
&gt; python -m pip install --upgrade pip
&gt; py -3.7 -m pip install --upgrade pip # python 3.7 的pip更新
若更新好，重新运行命令，发现
Requirement already satisfied: pip in c:\users\octob\appdata\local\programs\python\python37\lib\site-packages (21.1.1)

# 多版本共存如何 pip 安装
&gt; pip install requests # 默认 python 关联的 pip 命令安装，安装在python3.9（默认）下
&gt; py -3.7 -m pip install requests # python3.7 关联 pip 命令安装，安装在python3.7下

&gt; python -m pip list # 查看 list ，安装在C:\Users\***\AppData\Local\Programs\Python\Python39\Lib\site-packages
&gt; python -m pip list --outdated  # 检查哪些包需要更新
</code></pre>
<h2 id="3-linux-系统下多版本管理-建立一个对照表">3. Linux 系统下多版本管理<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>  - 建立一个对照表</h2>
<figure data-type="image" tabindex="3"><img src="https://numantia.github.io/post-images/linux_python.png" alt="linux_python" loading="lazy"></figure>
<p><strong>步骤 1：</strong> 查看 Linux 默认安装的 Python 位置</p>
<pre><code class="language-bash">$ whereis python # 多版本 python 安装位置
$ which python  # 默认 python 的位置
$ ls -l /usr/bin/python*  # 了解软链接
</code></pre>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1558377"><label class="task-list-item-label" for="task-item-1558377"> 软链接说明</label></li>
</ul>
<p><strong>步骤 2：</strong> 安装目标版本 Python</p>
<ol>
<li><a href="https://www.python.org/downloads/windows/">官网</a> （速度慢）或者<a href="http://npm.taobao.org/mirrors/python/">国内镜像</a>（速度快）下载Python 对应版本；</li>
<li>解压；</li>
<li>准备编译环境；</li>
<li>编译安装；</li>
</ol>
<pre><code class="language-bash">
$ wget http://python.org/ftp/python/2.7/Python-2.7.tar.bz2

$ tar -zxvf Python-3.6.5.tgz
$ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel $ readline-devel tk-devel gcc make

# 编译安装(进入 Python-3.6.5 目录)
$ ./configure --prefix=/root/training/Python-3.6.5
$ make &amp;&amp; make install
</code></pre>
<p><strong>步骤 3：</strong> 多版本 Python 管理</p>
<pre><code class="language-bash">$ sudo rm /usr/bin/python

$ python
~bash: /usr/bin/python: No such file or directory # 删除后没有对应

$ ln -s /usr/bin/python2.7 /usr/bin/python  # 建立软链接
$ # 建立目标对应链接

$ python

$ python3
</code></pre>
<p><strong>步骤 4：</strong> 多版本 Pip 管理</p>
<ol>
<li>创建软链接；</li>
<li>配置环境变量</li>
</ol>
<pre><code class="language-bash"># 安装pip前需要前置安装setuptools
$ wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26
$ tar -zxvf setuptools-19.6.tar.gz
$ cd setuptools-19.6
$ sudo python3 setup.py build
$ sudo python3 setup.py install

# 安装pip
$ wget --no-check-certificate  https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz#md5=3a73c4188f8dbad6a1e6f6d44d117eeb
$ tar -zxvf pip-8.0.2.tar.gz
$ cd pip-8.0.2
$ sudo python3 setup.py build
$ sudo python3 setup.py install

# 检查
$ pip -V

# 不同版本 pip 下载包
$ pip install numpy
$ pip3 install numpy

# 配置环境变量(直接使用pip，easy——install, 制订pip安装路径)
$ vi ~/.bash_profile
export PYTHON_HOME=/root/training/Python-3.6.5
export PATH=$PYTHON_HOME/bin:$PATH

保存退出（:wq）
$ source ~/.bash_profile
$ echo $PYTHON_HOME
</code></pre>
<h1 id="python-虚拟环境配置">Python 虚拟环境配置</h1>
<h2 id="1-原理和配置需求">1. 原理和配置需求</h2>
<p>虚拟环境并不是什么新技术，主要是利用了操作系统中环境变量以及进程间环境隔离的特性</p>
<h3 id="操作系统的环境变量">操作系统的环境变量</h3>
<p>可以为程序提供信息和做信息交换介质，进程可以共享操作系统中的环境变量，也可以为进程指定环境变量，其中 PATH 是很重要的环境变量，用于为操作系统和程序提供可执行文件的访问路径，例如写一个程序 a.exe，存放在 D:\MyProgram 中，在命令行中执行 a.exe ，会得到提示“ 无法找到程序 a.exe”，为了让系统找到，可以将 D:\MyProgram 路径加入到 PATH 环境变量中，当输入 a.exe 时，操作系统就会从 PATH 所提供的路径中逐个查找，这时就可以找到了。Linux 和 MacOS 具有相似的特性，甚至比 Windows 的功能更丰富。</p>
<h3 id="虚拟环境运行和-path-修改">虚拟环境运行和 PATH 修改</h3>
<p>Python 虚拟环境就是利用这个特性构建的，在激活虚拟环境之时，激活脚本会将当前命令行程序的 PATH 修改为虚拟环境的，这样执行命令就会在被修改的 PATH 中查找，从而避免了原本 PATH 可以找到的命令，从而实现了 Python 环境的隔离。</p>
<h3 id="python解释器和虚拟环境关系">Python解释器和虚拟环境关系</h3>
<img src="https://numantia.github.io/post-images/Python环境.png" alt="Python环境" style="zoom:80%;" />
<ul>
<li>一个操作系统下，可以有多个<code>“操作系统级别的” Python解释器</code>；</li>
<li>每个Python解释器有一个指向自己的pip工具，两者<code>一一对应</code>；</li>
<li>通过virtualenv可以虚拟任何一个“操作系统级别的”Python解释器成为一个“虚拟级别”的解释器；</li>
<li>每个“虚拟级别”的解释器又拥有自己独立的<code>pip工具和site-packages</code>。</li>
</ul>
<h2 id="2-安装-配置">2.  安装 &amp; 配置</h2>
<h3 id="使用-virtualenv-管理">使用 Virtualenv 管理<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h3>
<p>要点：</p>
<ol>
<li>python3.3 之前，只能通过 virtualenv 创建虚拟环境</li>
<li>virtualenv 可以指定 python解析器版本，但必须是在本地已安装。</li>
</ol>
<pre><code class="language-bash">&gt; pip install virtualenv # 默认 Python 位置安装 virtualenv
&gt; virtualenv --no-site-packages myvenv # 创建在当前目录
--no-site-packages: 复制主环境中安装的第三方包
-p: 用于指定 Python 解析器，就是安装好的 Python 应用程序，默认为当前环境中的 Python
–no-pip：不需要安装 pip，默认为安装
–clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建
</code></pre>
<h3 id="使用-venv-管理">使用 venv 管理</h3>
<p>要点：</p>
<ol>
<li>因为 venv 是依附于一个 Python 解析器创建的，所以不需要指定 Python 解释器版本</li>
<li>python 3.3 以后版本，可以通过自带模块 venv 创建虚拟环境</li>
</ol>
<pre><code class="language-bash">&gt; python -m venv myvenv
–without-pip: 不需要安装 pip，默认为安装
–clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建

</code></pre>
<h3 id="使用-pipenv-管理">使用 <a href="https://pipenv.pypa.io/en/latest/">pipenv</a> 管理</h3>
<p>pipenv是Python官方推荐的包管理工具。 它综合了 virtualenv , pip 和 pyenv 三者的功能。能够自动为项目创建和管理虚拟环境。 pipenv使用 Pipfile 和 Pipfile.lock 来管理依赖包，并且在使用pipenv添加或删除包时，自动维护 Pipfile 文件，同时生成 Pipfile.lock 来锁定安装包的版本和依赖信息，避免构建错误。相比pip需要手动维护requirements.txt 中的安装包和版本，具有很大的进步。详细使用方法，可参考这篇文章<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>。</p>
<pre><code class="language-bash"># 下载
$ pip install pipenv
# 创建环境并安装
$ cd myproject
$ pipenv install # 创建环境
$ pipenv install requests # 或者直接安装库
# 如果不存在pipfile,会生成一个pipfile，并且如果有的库添加会自动编辑该文件，不会我们手动更新requirements.txt文件了。
# 激活
$ pipenv shell
$ python --version
</code></pre>
<h2 id="3-激活-退出">3. 激活 &amp; 退出</h2>
<p>通过 virtualenv 和 模块 venv 创建的虚拟环境，激活方式是一样的，即运行激活脚本</p>
<ul>
<li>Windows 系统中，激活脚本路径是 <code>&lt;myvenv&gt;\Scripts\activate.bat</code>，如果是 powershell 命令行，脚本换成 <code>Activate.ps1</code> , 注意将 <code>&lt;myvenv&gt;</code> 换成你自己的虚拟环境目录</li>
<li>Linux 系统中，激活脚本路径是 <code>&lt;myvenv&gt;/bin/activate</code>，默认脚本没有执行权限，要么设置脚本为可执行，要么用 <code>source</code> 命令执行，例如<code>source myvenv/bin/activate</code></li>
</ul>
<p>检验是否已激活</p>
<pre><code class="language-bash">$ echo $PATH # linux 下
&gt; echo %PATH% # window 下
</code></pre>
<p>退出虚拟环境很简单，只需要执行 <code>deactivate</code> 命令就行</p>
<p>linux:</p>
<pre><code class="language-bash">$ deactivate
</code></pre>
<p>Windows 10:</p>
<pre><code class="language-powershell">&gt; .\Scripts\deactivate.bat
</code></pre>
<h2 id="4-anaconda-虚拟环境管理">4. Anaconda 虚拟环境管理</h2>
<p>conda可以直接创建不同python版本的虚拟环境。前面讲的virtualenv只是指定创建不同python版本的虚拟环境，前提是你的电脑上已经安装了不同版本的python,与conda相比没有conda灵活。</p>
<pre><code class="language-powershell"># 查看 Python 环境
conda info --env

# 创建一个python3.5的环境，我们把它命名为python35
conda create --name python35 python=3.5 # 安装
conda create --name python35 python=3.5 # numpy scipy #创建环境并安装包
conda create --name python37 --clone python37 # 克隆方式闯将环境

# 激活环境并在环境中安装必要包( mac/linux 系统中需命令首加上 source)
conda activate python35 # 物理路径在D:\Anaconda\envs
conda deactivate python35
conda/pip install numpy

# 迁移环境
conda list --explictit &gt; bio-env.txt

conda env export &gt; py36.yaml
conda env create -f py36.yaml # conda 安装的
pip freeze &gt; requirements.txt
pip install -r requirements.txt # pip 安装的


pip install -r requirements.txt -i http://pypi.douban.com/simple --trusted-host pypi.douban.com

# 删除 python35 
conda remove -n python35 --all

# help
conda --help
</code></pre>
<p>详细命令见<a href="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/3aaf8cfc-c8b0-48b6-b4fb-9db9e95bc7b5/conda-cheatsheet.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210519%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20210519T051849Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=3f9275c79f2f55c1f98d7bac479d54e78eec0e2a73bb385a842e887f45aafb29&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename%20%3D%22conda-cheatsheet.pdf%22">conda Cheet Sheet</a></p>
<h2 id="5-与开发工具配合">5. 与开发工具配合</h2>
<h3 id="visual-studio-code">Visual Studio Code</h3>
<p>按下 Ctrl+Shift+P, 在弹出的命令窗口中输入 “解析器”，然后在下拉列表中选择 “Python:选择解析器”，这里会缓存一些已经创建好的解析器，如果没有想要的，可以选择 “Enter interpreter path” 来选择解析器路径，即已经创建好的虚拟环境脚本文件夹中的 Python 程序，就可以创建一个新的解析器。</p>
<h3 id="pycharm">Pycharm</h3>
<p>创建项目时，在项目创建对话框中，可以创建或者选择已经已有的解析器</p>
<img src="https://numantia.github.io/post-images/pycharm配置python环境.png" alt="选择 Python 解析器" style="zoom:80%;" />
<p>其他参考<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p>
<h2 id="6-python-开发环境部署">6. Python 开发环境部署</h2>
<p><strong>此部分拷贝自<a href="http://www.justdopython.com/2020/05/26/python-virtualenv/">Python 虚拟环境 看这一篇就够了</a></strong></p>
<p>之所以在开发时选择虚拟环境，除了避免库之间的冲突，还有重要的原因时方便部署，因为虚拟环境时独立的，仅包含了项目相关的依赖库，所以部署的效率更高，风险更小</p>
<p>一般部署流程是：</p>
<ol>
<li>开发完成后，使用 <code>pip freeze &gt; requirements.txt</code> 命令将项目的库依赖导出，作为代码的一部分</li>
<li>将代码上传到服务器</li>
<li>在服务器上创建一个虚拟环境</li>
<li>激活虚拟环境，执行 <code>pip install -r requirements.txt</code>，安装项目依赖</li>
</ol>
<p>怎么运行项目，需要看项目的具体情况</p>
<ul>
<li>Web 项目 Web 项目一般使用 Django、Flask 的 Web 开发的提供 Web 服务的项目，部署时需要一个 Web 容器，作为程序的运行环境，容器的配置中都有一个虚拟环境的设置，其实是指定 Python 解析器的路径，将其设置为虚拟环境的目录或者 Python 解析器就可以了，启动时就用使用虚拟环境，并与其他环境隔离。例如 uWSGI 配置文件中 home 参数是用来指定解析器的。</li>
<li>服务类项目 服务类项目就是需要以服务的形式长时间运行的，例如之前介绍的 公交闹钟，或者一些定时爬虫之类的，对于 Linux 而言，当前主流的服务方式是 Systemd，是一种比 init 更先进的服务管理工具，在服务脚本中， 设置 ExecStart 执行命令为全路径的虚拟环境的 Python 解析器，服务启动时，使用独立的虚拟环境了。 Windows 服务，对于达成 EXE 包的，不需要配置虚拟环境，因为打包时已经考虑了环境问题了，如果时脚本运行的话，需要指定全路径的 Python 解析器</li>
<li>单次运行项目 对于一些测试或者实验性质的项目，大多数情况下手动执行，只要在激活的虚拟环境下，或者用特定的 Python 解析器运行就好了，和在开发过程中运行区别不大</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://blog.csdn.net/manmanlu2006/article/details/91039484">1. python多版本安装</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://blog.csdn.net/weixin_38725737/article/details/81084153">2. Linux下多版本python与多版本pip以及对应安装库包管理</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.liujiangblog.com/course/python/6">3. virtualenv 虚拟环境</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/37581807">4. Pipenv：新一代Python项目环境与依赖管理工具</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://www.cnblogs.com/zingp/p/8525138.html"> 5. Pipenv——最好用的python虚拟环境和包管理工具</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/60647332">6. 最全的Python虚拟环境使用方法</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="http://www.justdopython.com/2020/05/26/python-virtualenv/">7. Python 虚拟环境 看这一篇就够了</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[传感器选型与安装系列文章01：常用传感器-谈发展和产品谱系]]></title>
        <id>https://numantia.github.io/post/sensor-selection-guide01/</id>
        <link href="https://numantia.github.io/post/sensor-selection-guide01/">
        </link>
        <updated>2021-04-16T18:09:44.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python常见问题集]]></title>
        <id>https://numantia.github.io/post/python-FAQs/</id>
        <link href="https://numantia.github.io/post/python-FAQs/">
        </link>
        <updated>2021-04-13T18:09:44.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]</p>
<p><ul class="markdownIt-TOC">
<li><a href="#import-module">Import Module</a>
<ul>
<li><a href="#1-typeerror-module-object-is-not-callable">1. TypeError: 'module' object is not callable</a></li>
<li><a href="#unboundlocalerror-local-variable-xxx-referenced-before-assignment">UnboundLocalError： local variable 'xxx' referenced before assignment</a></li>
</ul>
</li>
<li><a href="#data-type-and-conversion">Data type and Conversion</a></li>
<li><a href="#string">String</a>
<ul>
<li><a href="#1-typeerror-str-object-is-not-callable">1. TypeError: 'str' object is not callable</a></li>
<li><a href="#2-string-%E5%88%87%E7%89%87%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA%E9%80%86%E5%BA%8F%E5%9F%BA%E6%95%B0%E8%BE%93%E5%87%BA">2. String 切片逆序输出，逆序基数输出</a></li>
</ul>
</li>
<li><a href="#list">List</a>
<ul>
<li><a href="#1-list-comprehension-%E5%8F%8C%E5%BE%AA%E7%8E%AF">1. List Comprehension - 双循环</a></li>
<li><a href="#2-%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">2. 初始化一维数组+二维数组</a></li>
<li><a href="#3-typeerror-list-indices-must-be-integers-or-slices-not-tuple">3. TypeError: list indices must be integers or slices, not tuple</a></li>
<li><a href="#4-indexerror-list-assignment-index-out-of-range">4. IndexError: list assignment index out of range</a></li>
<li><a href="#5-typeerror-list-object-is-not-callable">5. TypeError: 'list' object is not callable</a></li>
<li><a href="#6-python-%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E9%87%8C%E5%85%83%E7%B4%A0%E5%AF%B9%E5%BA%94%E7%9B%B8%E4%B9%98">6. Python 实现两个列表里元素对应相乘</a></li>
</ul>
</li>
<li><a href="#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99">文件读写</a>
<ul>
<li><a href="#1-%E5%AF%BC%E5%87%BA-csv-%E5%AD%98%E5%9C%A8%E7%A9%BA%E7%99%BD%E8%A1%8C%E9%9A%94%E8%A1%8C%E7%A9%BA%E8%A1%8C">1. 导出 csv 存在空白行/隔行空行</a></li>
<li><a href="#2-%E5%A4%9A%E4%B8%AA-print-%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9%E5%9C%A8%E5%90%8C%E4%B8%80%E8%A1%8C">2. 多个 Print() 显示内容在同一行</a></li>
<li><a href="#3-permissionerror-errno-13-permission-denied">3. PermissionError: [Errno 13] Permission denied</a></li>
</ul>
</li>
<li><a href="#numpy">Numpy</a>
<ul>
<li><a href="#1-numpy-%E8%8E%B7%E5%8F%96%E5%AF%B9%E5%BA%94%E6%95%B0%E5%AD%97%E7%B4%A2%E5%BC%95%E5%80%BC">1. numpy 获取对应数字索引值</a></li>
</ul>
</li>
<li><a href="#pandas">Pandas</a>
<ul>
<li><a href="#1-%E5%AD%97%E5%85%B8%E5%88%9B%E5%BB%BA-dataframe-%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E5%87%BA%E9%94%99">1. 字典创建 DataFrame 长度不一致出错</a></li>
<li><a href="#2-pandas-to-excel-%E5%AD%98%E5%82%A8%E4%B8%8D%E5%90%8C-sheet">2. Pandas to-excel() 存储不同 Sheet</a></li>
<li><a href="#3-pandas-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E8%A1%A8%E6%A0%BC%E5%A4%8D%E5%88%B6%E5%90%8C%E6%AD%A5%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98">3. Pandas 浅拷贝和深拷贝 - 表格复制同步修改问题</a></li>
</ul>
</li>
</ul>
</p>
<p>持续更新...</p>
<p>指数幂和n次方根</p>
<pre><code class="language-python">import math

math.pow( x, y )
x**y

# a的r次方
math.pow(a, 1/r)

pow(x,y,z) 等价于 x**y%z
4**2.5%3  # 结果为2.0
</code></pre>
<h1 id="import-module">Import Module</h1>
<h2 id="1-typeerror-module-object-is-not-callable">1. TypeError: 'module' object is not callable</h2>
<p><strong>产生原因</strong></p>
<p>模块前面未加模块名限定</p>
<p><strong>解决方法</strong></p>
<pre><code class="language-python">Python导入模块的方法有两种：
import module  # 所有导入的方法使用时需加上模块名的限
from module import *  # 无需模块名
</code></pre>
<h2 id="unboundlocalerror-local-variable-xxx-referenced-before-assignment">UnboundLocalError： local variable 'xxx' referenced before assignment</h2>
<p><strong>产生原因</strong></p>
<p>外部定义了变量，函数内部对该变量运算时</p>
<pre><code class="language-python">def test():
       if value == 1:
              a += 1  # 赋值操作a就会被认为是局部变量，而非全局变量
       return a  # return 或者 print 操作，由于局部变量a未定义，因此就会报错

value = a = 1
b = test()
</code></pre>
<p><strong>解决方法</strong></p>
<pre><code class="language-python"># a 定义为全局变量
def test():
       global a
       if value == 1:
              a += 1
       return a

value = a = 1
b = test()

# a 在函数内部定义为局部变量
def test():
　　  a = 1
       if value == 1:
              a += 1
       return a

value = a = 1
b = test()
</code></pre>
<h1 id="data-type-and-conversion">Data type and Conversion</h1>
<p>首先：表现形式不一致：list：[];字典{}；元组（）集合{}；</p>
<p>其次：python的列表各个元素可以是不一致的类型即[1,&quot;asd&quot;,10.25]；字典得有key-value，且key不能重复；元组不可以修改，是只读的list,但对于可变数据类型是可以修改的如：a=（1，2，[5,6,7]）,a[-1][-1]=2,则a=[1，2，2]；集合的元素不能有重复；</p>
<p>最后：类型转换：list（）；set（）；dict（）；tuple（）</p>
<p>比如删除list的重复元素，直接将其变换成set类型即可，然后在list变成列表。</p>
<p>List</p>
<p>dict</p>
<p>可存储长度不同，文件类型可以不一</p>
<p>np.array</p>
<p>长度必须一致</p>
<pre><code class="language-python"># 查看格式
print(type(1),type(3.14),
      type('a'),type('abd'),
      type((1,2,3)),type(True),type(None),
      type([]),type({1,2}),type({1:'monday',2:'tuesday'}))

# 强制类型转换
f = 3.14
print('f=%f,int(f)=%d '%(f,int(f)))
print(float(int(f)))
print(chr(65)) #整数转化为ascii码字符
print(ord('a')) #ascii字符转化为整数

# 转成布尔类型 bool()
print(bool('1'),bool('0'),bool([0])) #True
print(bool(''),bool(0),bool([]),bool(()),bool({})) #False

# 字符串 str()
print(type(str(f)))

# 加 r 忽略转义字符
print('c:\\\\user\\\\pycharm') #\\\\转义\\
print(r'c:\\user\\pycharm') #用r无需加转义
</code></pre>
<h1 id="string">String</h1>
<h2 id="1-typeerror-str-object-is-not-callable">1. TypeError: 'str' object is not callable</h2>
<p><strong>问题描述</strong></p>
<pre><code class="language-python">&gt;&gt;&gt; x=1.235
&gt;&gt;&gt; int(x)
1
&gt;&gt;&gt; str=&quot;fsgavfdbafdbntsbgbt&quot;
&gt;&gt;&gt; len(str)
19
&gt;&gt;&gt;
&gt;&gt;&gt; x=987456123
&gt;&gt;&gt; str(x)
TypeError: 'str' object is not callable
</code></pre>
<p><strong>产生原因</strong></p>
<p>str 为内部函数，str 变量赋值将其转化为变量，发生冲突，无法调用</p>
<p><strong>解决方法</strong></p>
<p>更改变量名，和系统内置函数名称<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>不重复</p>
<h2 id="2-string-切片逆序输出逆序基数输出">2. String 切片逆序输出，逆序基数输出</h2>
<p>name[::-1],没有写数字，默认为0，两个冒号表示从头到尾，以-1为间隔输出，即逆序输出全部</p>
<p>name[::-2]，以-1为间隔输出，即逆序输出奇数下标元素</p>
<h1 id="list">List</h1>
<h2 id="1-list-comprehension-双循环">1. List Comprehension - 双循环</h2>
<pre><code class="language-python">ntest=['a','b']
ltest=[[1,2],[4,5,6]]
data=[(k,v) for k,l in zip(ntest,ltest) for v in l] 
</code></pre>
<h2 id="2-初始化一维数组二维数组">2. 初始化一维数组+二维数组</h2>
<pre><code class="language-python"># 一维数组
a = [None] * n # 方法1
a = [None for i in range(n)] # 方法2

&gt;&gt;&gt; [None, None, None, None, None]

# 二维数组
a = [list()] * 5 # 浅拷贝方法，所有List会同步变化
a[0].append(1)  # 方法1
&gt;&gt;&gt; [[1], [1], [1], [1], [1]]

a = [list() for i in range(5)] # 所有List独立
a[0].append(1)  # 方法2
&gt;&gt;&gt; [[1], [], [], [], []]
</code></pre>
<h2 id="3-typeerror-list-indices-must-be-integers-or-slices-not-tuple">3. TypeError: list indices must be integers or slices, not tuple</h2>
<p><strong>问题描述</strong></p>
<pre><code class="language-python">&gt;&gt;&gt; a=[[1,2,3],[4,5,6]]
&gt;&gt;&gt; a[0]    #取一行
[1, 2, 3]
&gt;&gt;&gt; a[:,0]  #尝试用数组的方法读取一列失败
TypeError: list indices must be integers or slices, not tuple
</code></pre>
<p><strong>产生原因</strong></p>
<p>列表存储不同类型数据，列表元素大小相同或者不同，不支持读取一列</p>
<p><strong>解决方法1</strong>：列表解析的方法</p>
<pre><code class="language-python">&gt;&gt;&gt; b=[x[0] for x in a]
&gt;&gt;&gt; print(b)
</code></pre>
<p><strong>解决方法2</strong>:  转化为数组直接读取</p>
<pre><code class="language-python">&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a=np.array([[1,2,3],[4,5,6]])
&gt;&gt;&gt; a[:,0]
array([1, 4])
</code></pre>
<h2 id="4-indexerror-list-assignment-index-out-of-range">4. IndexError: list assignment index out of range</h2>
<p><strong>问题描述</strong></p>
<pre><code class="language-python">m1=[]
for i in range(10):
	m1[i]=1
</code></pre>
<p><strong>产生原因</strong></p>
<p>空数组无法直接确定位置，因为内存中尚未分配</p>
<p>**解决方法1：**使用append方法</p>
<pre><code class="language-python">m1.append(1）
</code></pre>
<p>**解决方法2：**先生成一个定长的list</p>
<pre><code class="language-python">m1=[0]*len(data)
m1[1]=1
</code></pre>
<h2 id="5-typeerror-list-object-is-not-callable">5. TypeError: 'list' object is not callable</h2>
<p><strong>问题描述</strong></p>
<pre><code class="language-powershell">&gt;&gt;&gt; str = &quot;ABCDEF&quot;
&gt;&gt;&gt; list = [1, 2 ,3 ,4 ,5,6 ]
&gt;&gt;&gt; list(str)

TypeError: 'list' object is not callable
</code></pre>
<p><strong>产生原因</strong></p>
<p>callable() 是python 的内置函数，用来检查对象是否可被调用</p>
<p>变量list和函数list重名，所以函数在使用list函数时，发现list是一个定义好的列表，而列表是不能把被调用的，因此抛出一个类型错误</p>
<h2 id="6-python-实现两个列表里元素对应相乘">6. Python 实现两个列表里元素对应相乘</h2>
<p>问题描述</p>
<pre><code class="language-powershell">&gt;&gt;&gt; list1 = [1,2,3]
&gt;&gt;&gt; list2 = [4,5,6]
&gt;&gt;&gt; list1*list2

TypeError: can't multiply sequence by non-int of type 'list'
</code></pre>
<p>解决方法1 ： Map函数</p>
<pre><code class="language-python">List1 = [1,2,3,4]
List2 = [5,6,7,8]
List3 = map(lambda a,b:a*b,zip(List1,List2))
print List3
</code></pre>
<p>解决方法2: np.multiply</p>
<pre><code class="language-python">List1 = [1,2,3]
List2 = [5,6,7]
List3 = np.multiply(np.array(List1),np.array(List2))
print List3.tolist()
</code></pre>
<h1 id="文件读写">文件读写</h1>
<h2 id="1-导出-csv-存在空白行隔行空行">1. 导出 csv 存在空白行/隔行空行</h2>
<pre><code class="language-python">with open(test.csv,'w',newline='') as f:
</code></pre>
<h2 id="2-多个-print-显示内容在同一行">2. 多个 Print() 显示内容在同一行</h2>
<p><strong>产生原因</strong></p>
<p>原理：Print 函数输出最后一个值缺省为换行符，由<code>end= '\n'</code>指定 , 去掉 <code>\n</code> ，即可实现不换行</p>
<pre><code class="language-python">print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
</code></pre>
<p><strong>解决方法</strong></p>
<pre><code class="language-python">print('hello,',end = '')
print('world')
&gt;&gt;&gt; hello,world
</code></pre>
<h2 id="3-permissionerror-errno-13-permission-denied">3. PermissionError: [Errno 13] Permission denied</h2>
<p><strong>问题描述</strong></p>
<p>保存CSV，路径为<strong>文件名</strong>，有访问权限，部分数据已顺利存储进入，继续运行，报错<code>PermissionError: [Errno 13] Permission denied</code></p>
<p><strong>产生原因</strong></p>
<p><a href="https://blog.csdn.net/shuiyixin/article/details/90370387?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.control">文章</a> 指出有三个原因造成该错误，第一是缺乏访问权限，第二是路径为<strong>文件夹名</strong>，而非文件名，第三为改文件打开。这里补充一个原因，该文件夹默认添加到云盘（Onedrive，Icloud，坚果云等）的同步文件夹中，同步操作时该文件无添加权限。</p>
<p><strong>解决方法</strong></p>
<p>关闭同步软件</p>
<h1 id="numpy">Numpy</h1>
<h2 id="1-numpy-获取对应数字索引值">1. numpy 获取对应数字索引值</h2>
<pre><code class="language-python">q=np.arange(0,16,1)
g=np.where(q==7)
print q
print g

[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
(array([7]),)

q=np.arange(0,16,1)
g=np.argwhere(q==7) # 注意这里，返回索引值的列表
print q
print g
print int(g) # 转化为可运算的数字序列

[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
[[7]]
7
</code></pre>
<h1 id="pandas">Pandas</h1>
<h2 id="1-字典创建-dataframe-长度不一致出错">1. 字典创建 DataFrame 长度不一致出错</h2>
<p><strong>问题描述</strong></p>
<pre><code class="language-python">import pandas as pd
d = {'A': [1, 2], 'C': [1, 2, 3, 4]}
data = pd.DataFrame(d)
&gt;&gt;&gt; ValueError: arrays must all be same length
</code></pre>
<p><strong>产生原因</strong></p>
<p>字典创建 DataFrame，键值对应的数组需等长。可以将键值数组转化转化为Series格式。</p>
<p><strong>解决方法</strong></p>
<pre><code class="language-python">import pandas as pd
a = {'A': [1, 2], 'C': [1, 2, 3, 4]}
b = dict([(k, pd.Series(v)) for k, v in d.items()]) # 列表转化为字典
c = pd.DataFrame(b) # 字典转化为Dataframe
c.to_excel('1.xlsx',index=False) # 序号从1开始

&gt;&gt;&gt;
    A  C
1  1.0  1
2  2.0  2
3  NaN  3
4  NaN  4
</code></pre>
<h2 id="2-pandas-to-excel-存储不同-sheet">2. Pandas to-excel() 存储不同 Sheet</h2>
<p><strong>问题描述</strong></p>
<pre><code class="language-python">import pandas as pd
a = dict.fromkeys(['a','b','c'],[])
b = dict.fromkeys(['a','b','c'],[])
num = 1 
for index in a.keys():
    a[index] = [num, num + 1 ,num + 2]
    for index in b.keys():
        b[index] = [num, num**2, num**3]
df1 = pd.DataFrame(df1)
df2 = pd.DataFrame(df2)
df1.to_excel('export_test.xls',sheet_name = 'sheet1')
df1.to_excel('export_test.xls',sheet_name = 'sheet2‘)
</code></pre>
<p>输出表格只有sheet2表，sheet1 表被覆盖。</p>
<p><strong>产生原因</strong></p>
<p>多次 to_excel() 输出，’export_test.xlsx‘ 被打开多次，写入只保留了最后一次。</p>
<p><strong>解决方法1 :</strong>   with open 方式使 ’export_test.xlsx‘ 被打开一次。</p>
<pre><code class="language-python">import pandas as pd
a = dict.fromkeys(['a','b','c'],[])
b = dict.fromkeys(['a','b','c'],[])
num = 1 
for index in a.keys():
    a[index] = [num, num + 1 ,num + 2]
    for index in b.keys():
        b[index] = [num, num**2, num**3]
df1 = pd.DataFrame(df1)
df2 = pd.DataFrame(df2)

with pd.ExcelWriter('export_test.xlsx') as write:
    df1.to_excel(write,sheet_name = 'sheet1')
    df2.to_excel(write,sheet_name = 'sheet2')
</code></pre>
<p><strong>解决方法2：</strong> 不用 with 方法，需在写入后上 write.save()</p>
<pre><code class="language-python">import pandas as pd
a = dict.fromkeys(['a','b','c'],[])
b = dict.fromkeys(['a','b','c'],[])
num = 1 
for index in a.keys():
    a[index] = [num, num + 1 ,num + 2]
    for index in b.keys():
        b[index] = [num, num**2, num**3]
df1 = pd.DataFrame(df1)
df2 = pd.DataFrame(df2)

write = pd.ExcelWriter('export_test.xlsx')
df1.to_excel(write,sheet_name = 'sheet1')
df2.to_excel(write,sheet_name = 'sheet2')
write.save()
</code></pre>
<p><strong>解决方法3：</strong> 补充<a href="https://www.thinbug.com/q/45251721">例子</a>利用字典循环输出不同 Sheet 表格</p>
<pre><code class="language-python">import pandas as pd

df1 = pd.DataFrame({'1_A': [1,2,3,4], '1_B': [5,4,6,5],
                    '1_C': [8,7,9,0], '1_D': [9,7,8,5], '1_E': [2,4,9,8]})
df2 = pd.DataFrame({'1_A': [5,4,1,3], '1_B': [55,2,3,4]})

setup_dict = {'Sheet_1': df1, 'Sheet_2': df2}

with pd.ExcelWriter('excel_file.xlsx',
                    engine='xlsxwriter') as writer:

    for ws_name, df_sheet in setup_dict.items():
        df_sheet.to_excel(writer, sheet_name=ws_name)
</code></pre>
<h2 id="3-pandas-浅拷贝和深拷贝-表格复制同步修改问题">3. Pandas 浅拷贝和深拷贝 - 表格复制同步修改问题</h2>
<p><strong>问题描述</strong></p>
<p>浅拷贝复制 pandas 数据，原数据修改会同时改变复制数据</p>
<pre><code class="language-python">import pandas as pd
a = pd.DataFrame({'id':[1,2,3,4,5],'fruit_name':[&quot;apple&quot;,&quot;orange&quot;,&quot;pineapple&quot;,&quot;banana&quot;,&quot;strawberry&quot;],'price':[7,8,9,10,11]})
b = a
a['price'] =[1, 1, 1, 1, 1]

&gt;&gt;&gt; b
   id  fruit_name  price
0   1       apple      1
1   2      orange      1
2   3   pineapple      1
3   4      banana      1
4   5  strawberry      1
</code></pre>
<p><strong>产生原因</strong></p>
<p>浅拷贝共用内存</p>
<p><strong>解决方法</strong></p>
<pre><code class="language-python"> b = a.copy()
 a['price'] =[2, 2, 2, 2, 2]

&gt;&gt;&gt; a
   id  fruit_name  price
0   1       apple      2
1   2      orange      2
2   3   pineapple      2
3   4      banana      2
4   5  strawberry      2
&gt;&gt;&gt; b
   id  fruit_name  price
0   1       apple      1
1   2      orange      1
2   3   pineapple      1
3   4      banana      1
4   5  strawberry      1
 
</code></pre>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://blog.csdn.net/nameix/article/details/54341949">内置函数+内置变量+内置模块</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[传感器选型与安装系列文章02：看懂传感器技术参数表-谈规格、环境、电气和结构]]></title>
        <id>https://numantia.github.io/post/sensor-selection-guide02/</id>
        <link href="https://numantia.github.io/post/sensor-selection-guide02/">
        </link>
        <updated>2021-04-13T18:09:44.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%8A%80%E6%9C%AF%E5%8F%82%E6%95%B0%E8%A1%A8">技术参数表</a></li>
<li><a href="#%E4%BC%A0%E6%84%9F%E5%99%A8%E6%80%A7%E8%83%BD%E5%8F%82%E6%95%B0">传感器性能参数</a>
<ul>
<li><a href="#1-%E7%81%B5%E6%95%8F%E5%BA%A6-%E8%BE%93%E5%87%BA%E9%87%8F%E8%BE%93%E5%85%A5%E9%87%8F%E6%AF%94%E5%80%BC">1. 灵敏度 -- 输出量/输入量比值</a></li>
<li><a href="#2-%E7%BA%BF%E6%80%A7%E5%BA%A6-%E7%81%B5%E6%95%8F%E5%BA%A6%E5%81%8F%E7%A6%BB%E6%A0%A1%E5%87%86%E6%9B%B2%E7%BA%BF%E7%A8%8B%E5%BA%A6">2. 线性度  -- 灵敏度偏离校准曲线程度</a></li>
<li><a href="#3-%E5%93%8D%E5%BA%94%E9%A2%91%E7%8E%87-%E4%BC%A0%E6%84%9F%E5%99%A8%E5%A4%96%E9%83%A8%E4%BF%A1%E5%8F%B7%E7%9A%84%E5%8F%8D%E5%BA%94%E8%83%BD%E5%8A%9B">3. 响应频率 -- 传感器外部信号的反应能力</a></li>
<li><a href="#4-%E7%B2%BE%E5%BA%A6%E5%92%8C%E5%88%86%E8%BE%A8%E7%8E%87-%E6%9C%80%E5%A4%A7%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE%E5%92%8C%E6%9C%80%E5%B0%8F%E5%8F%98%E5%8C%96%E9%87%8F">4. 精度和分辨率 - 最大绝对误差和最小变化量</a></li>
<li><a href="#5-%E9%9B%B6%E7%82%B9%E6%BC%82%E7%A7%BB-%E9%9B%B6%E7%82%B9%E5%81%8F%E7%A6%BB%E7%A8%8B%E5%BA%A6%E5%8F%98%E5%8C%96">5. 零点漂移 -- 零点偏离程度变化</a></li>
</ul>
</li>
<li><a href="#%E4%BC%A0%E6%84%9F%E5%99%A8%E7%8E%AF%E5%A2%83%E9%80%82%E5%BA%94%E6%80%A7">传感器环境适应性</a>
<ul>
<li><a href="#1-%E6%B8%A9%E5%BA%A6%E6%B8%A9%E5%BA%A6%E6%BC%82%E7%A7%BB-%E6%B8%A9%E5%BA%A6%E5%AF%B9%E7%81%B5%E6%95%8F%E5%BA%A6%E5%BD%B1%E5%93%8D%E7%89%B9%E6%80%A7">1. 温度/温度漂移 -- 温度对灵敏度影响特性</a></li>
<li><a href="#2-%E6%B9%BF%E5%BA%A6%E5%B0%98%E5%9C%9F">2. 湿度/尘土</a></li>
<li><a href="#3-%E7%94%B5%E7%A3%81%E5%B9%B2%E6%89%B0">3. 电磁干扰</a></li>
<li><a href="#4-%E5%86%B2%E5%87%BB%E6%9E%81%E9%99%90">4. 冲击极限</a></li>
</ul>
</li>
<li><a href="#%E4%BC%A0%E6%84%9F%E5%99%A8%E7%94%B5%E6%B0%94%E7%89%B9%E6%80%A7">传感器电气特性</a>
<ul>
<li><a href="#1%E6%BF%80%E5%8A%B1%E7%94%B5%E5%8E%8B%E7%94%B5%E6%B5%81%E6%9C%89%E6%BA%90%E6%97%A0%E6%BA%90">1.激励电压/电流——有源/无源</a></li>
<li><a href="#2-%E7%A8%B3%E5%AE%9A%E6%97%B6%E9%97%B4%E4%BF%A1%E5%8F%B7%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%B6%E9%97%B4">2. 稳定时间——信号稳定的时间</a></li>
</ul>
</li>
<li><a href="#%E4%BC%A0%E6%84%9F%E5%99%A8%E7%89%A9%E7%90%86%E7%89%B9%E6%80%A7">传感器物理特性</a>
<ul>
<li><a href="#1-%E6%9D%90%E6%96%99%E7%89%B9%E6%80%A7">1. 材料特性</a></li>
<li><a href="#2-%E5%B0%BA%E5%AF%B8%E8%B4%A8%E9%87%8F">2. 尺寸质量</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">其他注意事项</a></li>
</ul>
</p>
<p>[TOC]</p>
<p>通过<a href="https://numantia.github.io/post/sensor-selection-guide01/">系列文章01-常用传感器-谈发展和产品谱系</a>，我们认识了常用传感器的种类，以及对传感器工作原理和特点有所了解。接下来，让一份由<code>技术参数表</code>带领我们更深入认识传感器。</p>
<h1 id="技术参数表">技术参数表</h1>
<p>选型传感器前，我们可以拿到一份厂家提供的技术手册，结合产品说明和技术参数，我们就可以获得产品的基本信息。对比分析就可以对市场传感器技术规则，特点，应用环境有个大体认识。</p>
<p>Kistler 8702和8704型加速度计的产品描述：</p>
<blockquote>
<p>该型号下加速度内置剪切模式石英晶体传感器元件。稳定性强的石英晶体材料应用，确保了长期可重复、准确测量。剪切式元件设计具有横向灵敏度低、底座变形和热瞬变不敏感等特点。该型号加速度计体积小、重量轻、适用于实验室或工业环境下通用振动测量。应用场景包括：车辆测试、汽车NVH测试和旋转机械振动分析。</p>
</blockquote>
<p>下图为Kistler 8702和8704型加速度计主要技术参数（<a href="https://www.kistler.com/files/document/000-239c.pdf?callee=frontend">中文版</a>，<a href="https://www.kistler.com/files/document/000-238a.pdf?callee=frontend">英文版</a>）。</p>
<p>技术参数表提供了一款传感器的详细技术规格情况，包括性能参数、电气特性、环境适用性以及结构和安装方式。</p>
<img src="https://numantia.github.io/post-images/kistler-8702B-accelerometer-specifications.png" alt="kistler-8702B-accelerometer-specifications" style="zoom:80%;" />
<img src="https://numantia.github.io/post-images/kistler-8702B-accelerometer-environments.png" alt="kistler-8702B-accelerometer-environments" style="zoom:80%;" />
<img src="https://numantia.github.io/post-images/kistler-8702B-accelerometer-electrics.png" alt="kistler-8702B-accelerometer-electrics" style="zoom:80%;" />
<img src="https://numantia.github.io/post-images/kistler-8702B-accelerometer-construction.png" alt="kistler-8702B-accelerometer-construction" style="zoom:80%;" />
<p>传感器选型过程中要综合考虑这些技术参数，不仅是性能的满足，也要考虑安装方式可行性以及环境适用性。下面是主要技术指标的介绍。</p>
<h1 id="传感器性能参数">传感器性能参数</h1>
<h2 id="1-灵敏度-输出量输入量比值">1. 灵敏度 -- 输出量/输入量比值</h2>
<p>传感器灵敏度指到达稳定工作状态时，输出变化量与引起变化的输入变化量之比。</p>
<p>a. <strong>灵敏度和量程关系：</strong>  量程大的传感器，灵敏度低，量程小的传感器，灵敏度高；</p>
<p>b. <strong>灵敏度和质量关系：</strong>  （振动传感器）传感器灵敏度越高，则传感器的质量越大，传感器输出电压越大，信噪比越高，分辨能力越强。</p>
<h2 id="2-线性度-灵敏度偏离校准曲线程度">2. <a href="https://www.vfe.ac.cn/NewsDetail-2188.aspx">线性度 </a> -- 灵敏度偏离校准曲线程度</h2>
<p>线性度或非线性误差表征的是传感器在幅域上的偏差，指的是校准曲线与某一规定直线一致的程度，如果传感器不在线性区间进行测量，则测量得到的幅值误差较大，一般要求传感器非线性 &lt; 1% 。如下所示。这个偏差除了取决于校准曲线，还取决于拟合直线，因此在谈到线性度或非线性误差时，应同时说明其所依据的基准直线。常用的拟合直线有<code>端基直线</code>、<code>最佳直线</code>、<code>最小二乘线</code>等，端基直线指的是两端点之间的直线，最佳直线指的是保证传感器正反行程校准曲线对它的正负偏差相等且最小的直线，最小二乘线指的是使传感器校准数据残差平方和最小的直线。</p>
<p>非线性误差最常见的表征形式是最大偏差与满量程的比值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(1)</mtext></mtd><mtd><mrow><msub><mi>δ</mi><mi>L</mi></msub><mo>=</mo><mo>±</mo><mfrac><mrow><mi mathvariant="normal">Δ</mi><msub><mi>Y</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><msub><mi>Y</mi><mrow><mi>F</mi><mi>S</mi></mrow></msub></mfrac><mo>×</mo><mn>100</mn><mi mathvariant="normal">%</mi></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">\delta_{L}=\pm\frac{\Delta Y_{max}}{Y_{FS}}\times 100 \% \tag{1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord">±</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span><span class="tag"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<p>a. <strong>实际灵敏度和理想灵敏度：</strong> 实际灵敏度不同于理想线性灵敏度，输出输入间并非完美的线性关系；</p>
<p>b. <strong>线性度和灵敏度关系：</strong> 线性度反应的是灵敏度的偏离程度。</p>
<img src="https://numantia.github.io/post-images/非线性度误差.png" alt="非线性度误差" style="zoom: 80%;" />
<h2 id="3-响应频率-传感器外部信号的反应能力">3. 响应频率 -- 传感器外部信号的反应能力</h2>
<p>很多传感器可以看作一个单自由度系统，因此传感器也有自己的固有频率，其频率响应往往不是一条直线。传感器典型的频率响应曲线如下图所示，它分为幅频曲线与相频曲线，在频响曲线的起始段与接近共振峰的频率附近传感器的测量精度会产生较大偏差。</p>
<img src="https://numantia.github.io/post-images/amplitude_phase_frequency.png" alt="amplitude_phase_frequency.png" style="zoom:80%;" />
<p>a. 响应频率和外部信号关系：** 频率响应受到结构特性的影响，频响越高，可测的信号频率范围就宽；频率低的压力传感器可测信号的频率较低。比如压力传感器的响应频率是每秒5000次，外部信号频率是6000次，那么传感器就无法对外部信号做出正确的反应度。如果这时传感器是作为问计数器信号采集的话，传感器就无法输出正确的计数器值，造成计数信号缺答失；</p>
<p>b. <strong>谐振频率和工作频率：</strong> 谐振频率为传感器本身结构决定的第一阶固有频率，谐振频率和质量有关，一般尺寸越小，谐振频率越高。传感器工作上限频率取决于幅频曲线中谐振频率（一般工作频率范围为其自身谐振频率的1/3以下）；</p>
<p>c. <strong>频响特性和工作频率：</strong> b项中提到的<code>谐振频率 1/3 确定传感器工作频率上限</code>，但这个 1/3 是约估，准确的使用范围，需分析加速度计的频响曲线。去除低频响应段和高频响应段。另一般将幅频曲线偏差 <code>± 5%</code> (谐振频率的 1/5 )以内的频带作为传感器的工作频率范围，也有的传感器会按照<code>± 10%</code>(谐振频率的 1/3 )的偏差给出工作频率范围。工业传感器则一般以 <code>3 dB</code>以内的偏差作为工作频率范围，这些指标在传感器的规格说明书里都会给出具体值。外传感器的安装刚度对传感器能测的频率范围也有影响。</p>
<p>d. <strong>低频响应特性：</strong><a href="https://www.sekorm.com/news/8711.html">内装IC电路芯片传感器</a>低频特性主要由内置芯片的下限频率和传感器的基座应变、热释电效应等环境特性决定；而电路芯片的下限频率取决于 RC 电路，也就是取决于放电时间常数 DTC。**放电时间常数越大，信号衰减越慢，低频响应越好。**基座应变、环境温度变化等环境干扰引起的输出通常在 5 Hz 以下，当测试信号频率在 5 Hz 以上时，应将 IEPE 传感器内置电路芯片下限截止频率设置在 5 Hz 以上，以消除压电传感器的热电等环境干扰引起的噪声输出。当测试信号频率在 5 Hz 以下时，可以选择诸如<code>隔离剪切结构</code>等隔离基座应变、<code>热释电效应等环境干扰性能好</code>的加速度传感器。</p>
<img src="https://numantia.github.io/post-images/working-frequency- resonant-frequency.png" alt="working-frequency- resonant-frequency" style="zoom:80%;" />
<p><code>质量对灵敏度和频响特性影响规律:在敏感元件的刚度时，质量块越重，谐振频率越低。同时，大的质量块产生高的机械增益，传感器的灵敏度高，噪声低。相反，小的质量块产生低的机械增益，传感器的灵敏度低、输出小，频率范围宽，可以测量较高的频率信号。</code></p>
<h2 id="4-精度和分辨率-最大绝对误差和最小变化量">4. 精度和分辨率 - 最大绝对误差和最小变化量</h2>
<p>a. <strong>精度：</strong>  传感器的精度表示传感器在规定条件下允许的<strong>最大绝对误差</strong>相对于传感器满量程输出的百分数。</p>
<p>b. <strong>最小检测量（分辨率）：</strong>  最小检测量是指传感器能确切反映被检测量的最低极限量。</p>
<p>c. <strong>分辨率与噪声：<strong>噪声往往决定了传感器能测量的</strong>最小量</strong>，分辨率则决定了传感器测量的<strong>最小变化量</strong>。</p>
<table>
<thead>
<tr>
<th>Broadband Resolution （1  to 10000 Hz）</th>
<th>0.00015 g rms</th>
</tr>
</thead>
<tbody>
<tr>
<td>spectral Noise(1 Hz)</td>
<td>39 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>g</mi><msqrt><mo>(</mo></msqrt><mi>H</mi><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mu g \sqrt(Hz)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mopen" style="padding-left:1em;">(</span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>spectral Noise(10 Hz)</td>
<td>11 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>g</mi><msqrt><mo>(</mo></msqrt><mi>H</mi><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mu g \sqrt(Hz)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mopen" style="padding-left:1em;">(</span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>spectral Noise(100 Hz)</td>
<td>3.4 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>g</mi><msqrt><mo>(</mo></msqrt><mi>H</mi><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mu g \sqrt(Hz)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mopen" style="padding-left:1em;">(</span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>spectral Noise(1 kHz)</td>
<td>1.4 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>g</mi><msqrt><mo>(</mo></msqrt><mi>H</mi><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mu g \sqrt(Hz)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mopen" style="padding-left:1em;">(</span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<h2 id="5-零点漂移-零点偏离程度变化">5. 零点漂移 -- 零点偏离程度变化</h2>
<p>传感器无输入(或某一输入值不变)时，每隔一段时间进行读数，其输出偏离零值(或原指示值)，即为零点漂移。</p>
<h1 id="传感器环境适应性">传感器环境适应性</h1>
<h2 id="1-温度温度漂移-温度对灵敏度影响特性">1. 温度/温度漂移 -- 温度对灵敏度影响特性</h2>
<p>任何一种传感器都有自身的工作温度范围，因此根据实际测点位置的温度，以及环境温度来选择合适的传感器。可用温度漂移来表征温度变化时，传感器输出值的偏离程度。</p>
<img src="https://numantia.github.io/post-images/温度对传感器灵敏度影响.png" alt="温度对传感器灵敏度影响" style="zoom:80%;" />
<h2 id="2-湿度尘土">2. 湿度/尘土</h2>
<p>传感器使用时湿度、尘土等环境因素的影响。对于测试环境存在潮湿、腐蚀等影响因素时，选择传感器也应该考虑这些因素。</p>
<h2 id="3-电磁干扰">3. 电磁干扰</h2>
<h2 id="4-冲击极限">4. 冲击极限</h2>
<p>通常用峰值表示，如某传感器的冲击极限为±7000g pk</p>
<h1 id="传感器电气特性">传感器电气特性</h1>
<h2 id="1激励电压电流有源无源">1.激励电压/电流——有源/无源</h2>
<p>a. ICP型传感器需要提供20-30VDC激励电压和2-20mA的恒流激励，数据采集仪普遍内置了这样的供电装置，可直接给ICP传感器供电。</p>
<p>b. MEMS加速度传感器，力平衡式加速度传感器等，采集仪不能提供相应的激励电压/电流，则需要选择外部供电方式</p>
<h2 id="2-稳定时间信号稳定的时间">2. 稳定时间——信号稳定的时间</h2>
<p>对于ICP型传感器，由于存在放电常数，当给传感器供电时，传感器输出的信号会从无穷远处慢慢地稳定到基线附近，这个时间称为稳定时间。而我们在进行测量时，应待传感器输出的信号稳定之后再进行测量。通常这个时间只需要几秒钟。</p>
<h1 id="传感器物理特性">传感器物理特性</h1>
<h2 id="1-材料特性">1. 材料特性</h2>
<p>对于压电式和ICP型传感器多半采用石英晶体和压电陶瓷作为敏感材料。</p>
<p>石英晶体的介电和压电常数的温度稳定性好，适于做工作温度很宽的传感器。</p>
<p>具有压电效应的压电陶瓷是人工合成的，原始的压电陶瓷不具有压电效应。由于压电陶瓷制作工艺更方便、耐湿、耐高温等优点，当今的压电传感器多半采用压电陶瓷作为敏感材料。</p>
<h2 id="2-尺寸质量">2. 尺寸质量</h2>
<p>a. 安装空间和传感器尺寸型式</p>
<p>b. 有效质量（参与振动部分质量）和传感器质量</p>
<p>c. 考虑工装质量</p>
<h1 id="其他注意事项">其他注意事项</h1>
<p>接下来，我们通过两个案例分析，来直观掌握传感器的选型和安装。</p>
<p><a href="https://numantia.github.io/post/sensor-selection-guide03/">传感器选型与安装系列文章03：案例1-电机故障诊断用振动传感器选型和安装</a></p>
<p><a href="https://numantia.github.io/post/sensor-selection-guide04/">传感器选型与安装系列文章04：案例2-搭建船舶柴油机热工参数监测系统</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[传感器选型与安装系列文章03：案例1-电机故障诊断用振动传感器选型和安装]]></title>
        <id>https://numantia.github.io/post/sensor-selection-guide03/</id>
        <link href="https://numantia.github.io/post/sensor-selection-guide03/">
        </link>
        <updated>2021-04-13T18:09:44.000Z</updated>
        <content type="html"><![CDATA[<p>传感器原理种类</p>
<p>传感器静态指标</p>
<ol>
<li>
<p>灵敏度和横向灵敏度</p>
<p>振动传感器灵敏度指单位振动量输出的电信号量，常用单位有pC/g、mV/g、mV/(m/ss)等。由于切割或极化方向偏差等因素影响，振动传感器感受到与<code>横向(敏感轴正交)作用的加速度</code>时也会输出信号，此输出信号与<code>横向作用的加速度</code>之比称为传感器的横向灵敏度。<code>横向灵敏度通常以主轴灵敏度的百分数表示</code>。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[传感器选型与安装系列文章04：案例2-搭建船舶柴油机热工参数监测系统]]></title>
        <id>https://numantia.github.io/post/sensor-selection-guide04/</id>
        <link href="https://numantia.github.io/post/sensor-selection-guide04/">
        </link>
        <updated>2021-04-13T18:09:44.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[传感器选型与安装系列文章05：关于传感器展望-物联网、边缘、无线]]></title>
        <id>https://numantia.github.io/post/sensor-selection-guide05/</id>
        <link href="https://numantia.github.io/post/sensor-selection-guide05/">
        </link>
        <updated>2021-04-13T18:09:44.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Post Processing 01- variables_creation and simple multi-run analysis]]></title>
        <id>https://numantia.github.io/post/post-processing-01-variables_creation-and-simple-multi-run-analysis/</id>
        <link href="https://numantia.github.io/post/post-processing-01-variables_creation-and-simple-multi-run-analysis/">
        </link>
        <updated>2020-06-08T10:01:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-saving-data-and-loading-data">1. Saving data and loading data</h2>
<p>Compare the curves of varibales from sequencial run though plotting the old curve and new curve on the same plot.</p>
<ol>
<li>Save date as <code>AMEPlot data</code> format.</li>
<li>Reload old curves  by selecting <code>load data</code> in the <code>File</code> Menu.</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://numantia.github.io/post-images/1591610526689.png" alt="" loading="lazy"></figure>
<blockquote>
<p>For detail information, please refers to LMS Amesim Tutorial &gt; 3.3.3</p>
</blockquote>
<h2 id="2-create-post-processed-variables">2. Create Post-Processed Variables</h2>
<ol>
<li>
<p>open <strong>Post processing</strong> tab if it is not already present (view &gt; show/hide &gt; Post Processing).</p>
</li>
<li>
<p>Drag and drop the variable specified from <strong>Contextual variable view window</strong> to the <strong>Post processing</strong> Tab.</p>
</li>
<li>
<p>Edit <strong>Title</strong> for clarity and edit <strong>Expression</strong> for data processing.</p>
</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://numantia.github.io/post-images/1591610540929.png" alt="" loading="lazy"></figure>
<blockquote>
<p>refer to Amesim Tutorials &gt; 5. The Result Manager &gt; 5.1 Creating post-processed variables</p>
</blockquote>
<h2 id="3-creating-multi-circuit-post-processed-variables">3. Creating multi-circuit post-processed variables</h2>
<p>A post-processed variable can use variables or parameters <strong>from several systems</strong>. This is done by appending <code>:system_name</code> to the variable path to indicate the source system.</p>
<p>sink@signalsink+sink@signalsink<code>:Signal2</code></p>
<figure data-type="image" tabindex="3"><img src="https://numantia.github.io/post-images/1591610557436.png" alt="" loading="lazy"></figure>
<blockquote>
<p>refer to Amesim Tutorials &gt; 5. The Result Manager &gt; 5.2 Creating multi-circuit post-processed variables</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LMS Ameim sign convention]]></title>
        <id>https://numantia.github.io/post/lms-ameim-sign-convention/</id>
        <link href="https://numantia.github.io/post/lms-ameim-sign-convention/">
        </link>
        <updated>2020-06-08T03:15:18.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<!-- more -->
<h2 id="1-linear-sign-convention">1. Linear Sign Convention</h2>
<figure data-type="image" tabindex="1"><img src="https://numantia.github.io/post-images/1591586270137.png" alt="" loading="lazy"></figure>
<p>质量块上符号和箭头标志，箭头指向右侧为位移正方向，同样速度和加速度正方向也是同侧。</p>
<figure data-type="image" tabindex="2"><img src="https://numantia.github.io/post-images/1591586302225.png" alt="" loading="lazy"></figure>
<p>质量组件变量窗口中，实际施加在质量块上的力箭头方向和变量串口中的一致。1口和2口的速度输出方向相反。在合力计算中，F2 视作正方向，而 F1 被视作负方向。假若F2=0， 若想质量块向右侧移动，F1需为负值。</p>
<h2 id="2-rotary-sign-convention">2. Rotary Sign Convention</h2>
<p>旋转部件的符号含义和线性符号一致，指示旋转方向，角速度，角加速度的旋转正方向。</p>
<figure data-type="image" tabindex="3"><img src="https://numantia.github.io/post-images/1591586313322.png" alt="" loading="lazy"></figure>
<p>驱动力矩正旋向可以通过右手法则判断，右手拇指指向箭头方向，四指指示的旋向即为正方向（从右侧观察）</p>
<figure data-type="image" tabindex="4"><img src="https://numantia.github.io/post-images/1591586326580.png" alt="" loading="lazy"></figure>
<h2 id="3-u-turn-connections">3. U-Turn Connections</h2>
<p>当两个组件使用U型连接线连接，速度方向会被改变，特别对于旋转部件。</p>
<p><img src="https://numantia.github.io/post-images/1591586332538.png" alt="" loading="lazy"><img src="E:%5CTypora%5Cimg%5CU-Turn-Link01.png" alt="" loading="lazy"></p>
<p>在需要使用U型连接线的场所，可以使用机械链接元件，这些元件自动考虑到负荷规则。<br>
<img src="https://numantia.github.io/post-images/1591586343635.png" alt="" loading="lazy"></p>
<h2 id="4-summary">4. Summary</h2>
<p>旋转机械零件上的 &quot;+&quot; 号和箭头，指示转速和扭矩的正方向。用户连接组件的方式并不影响模型机理，但对Amesim中<code>方向规定(Sign Convention)</code>缺乏了解，对于仿真模型的分析上会变得棘手。可以使用重放（Replay）功能来监测方向规定，更详细的介绍可以参考<code>Replay manual</code>。</p>
]]></content>
    </entry>
</feed>